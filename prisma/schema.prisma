// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  name String
}

model Client {
  // Personal Information
  id Int @id @default(autoincrement())
  email String @unique
  password String
  name String
  contactNumber Int
  address String
  postalCode Int
  active Boolean @default(false)
  activateClientToken ActivateClientToken[]
  PasswordResetClientToken PasswordResetClientToken[]
}

model ActivateClientToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?

  client Client @relation(fields: [clientId], references: [id])
  clientId Int
}

model PasswordResetClientToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?

  client Client @relation(fields: [clientId], references: [id])
  clientId Int
}

model Tutor {
  // Personal Information
  id Int @id @default(autoincrement())
  email String @unique
  password String
  name String
  contactNumber Int
  dateOfBirth DateTime
  gender String
  age Int
  nationality String
  race String
  
  // Tutoring Preferences
  // level String
  // subject String
  // location String

  // Academic Qualifications and Preferences
  typeOfTutor String
  yearsOfExperience Int
  highestEducationLevel String

  active Boolean @default(false)
  activateTutorToken ActivateTutorToken[]
  PasswordResetTutorToken PasswordResetTutorToken[]
}

model ActivateTutorToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?

  tutor Tutor @relation(fields: [tutorId], references: [id])
  tutorId Int
}

model PasswordResetTutorToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?

  tutor Tutor @relation(fields: [tutorId], references: [id])
  tutorId Int
}